generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(cuid())
  name                   String
  email                  String         @unique
  emailVerified          DateTime?
  emailVerificationToken String?        @unique
  password               String
  image                  String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  googleAccessToken      String?
  googleRefreshToken     String?
  googleTokenExpiresAt   DateTime?
  
  // Subscription related fields
  subscriptionId         String?        @unique
  subscriptionStatus     SubscriptionStatus? @default(INACTIVE)
  subscriptionPlan       SubscriptionPlan?
  trialStartedAt         DateTime?
  trialEndsAt            DateTime?
  currentPeriodStart     DateTime?
  currentPeriodEnd       DateTime?
  razorpayCustomerId     String?
  razorpayPaymentId      String?
  razorpayOrderId        String?
  
  ownedOrganizations     Organization[] @relation("OrganizationOwner")
  posts                  Post[]
  reviewReplies          ReviewReply[]
  sessions               Session[]
  locations              Location[]     @relation("LocationToUser")
  organizations          Organization[] @relation("OrganizationToUser")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id          String            @id @default(cuid())
  name        String
  logo        String?
  ownerId     String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  aiTemplates AIReplyTemplate[]
  locations   Location[]
  owner       User              @relation("OrganizationOwner", fields: [ownerId], references: [id])
  reportJobs  ReportJob[]
  members     User[]            @relation("OrganizationToUser")
}

model Location {
  id              String       @id @default(cuid())
  name            String
  organizationId  String
  gmbLocationId   String       @unique
  gmbLocationName String
  address         String?
  phone           String?
  websiteUrl      String?
  latitude        Float?
  longitude       Float?
  timezone        String       @default("UTC")
  isVerified      Boolean      @default(false)
  lastSyncedAt    DateTime     @default(now())
  lastFetchedTimestamp DateTime?
  autoReplyEnabled Boolean     @default(false)
  autoPostEnabled  Boolean     @default(false)
  replyTonePreference ReplyTone?
  accessToken     String?
  refreshToken    String?
  tokenExpiresAt  DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  logoUrl         String?
  gmbAccountId    String?
  insights        Insight[]
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  posts           Post[]
  reports         Report[]
  reviews         Review[]
  users           User[]       @relation("LocationToUser")
  searchKeywords  SearchKeyword[]
}

model Post {
  id          String     @id @default(cuid())
  locationId  String
  userId      String
  title       String
  content     String
  type        PostType
  mediaUrls   String[]
  scheduledAt DateTime
  publishedAt DateTime?
  status      PostStatus @default(SCHEDULED)
  eventStart  DateTime?
  eventEnd    DateTime?
  offerStart  DateTime?
  offerEnd    DateTime?
  couponCode  String?
  callToAction String?
  recurType   RecurType?
  recurEndsAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  location    Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id])
}

model Review {
  id            String         @id @default(cuid())
  locationId    String
  reviewId      String         @unique
  authorName    String
  authorPhoto   String?
  rating        Int
  comment       String?
  createTime    DateTime
  updateTime    DateTime
  status        ReviewStatus   @default(PENDING)
  isProcessed   Boolean        @default(false)
  sentiment     SentimentType?
  language      String?
  isReplyNeeded Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  location      Location       @relation(fields: [locationId], references: [id], onDelete: Cascade)
  replies       ReviewReply[]
}

model ReviewReply {
  id           String           @id @default(cuid())
  reviewId     String
  userId       String?
  content      String
  source       ReplySource
  tone         ReplyTone        @default(FRIENDLY)
  isPublished  Boolean          @default(false)
  publishedAt  DateTime?
  aiTemplateId String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  aiTemplate   AIReplyTemplate? @relation(fields: [aiTemplateId], references: [id])
  review       Review           @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user         User?            @relation(fields: [userId], references: [id])
}

model AIReplyTemplate {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  content        String
  tone           ReplyTone     @default(FRIENDLY)
  sentiment      SentimentType
  isDefault      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  replies        ReviewReply[]
}

model Insight {
  id         String      @id @default(cuid())
  locationId String
  date       DateTime
  type       InsightType
  value      Int
  createdAt  DateTime    @default(now())
  location   Location    @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, date, type])
}

model Report {
  id         String       @id @default(cuid())
  locationId String
  name       String
  startDate  DateTime
  endDate    DateTime
  reportType ReportType
  fileUrl    String?
  status     ReportStatus @default(GENERATING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  location   Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model ReportJob {
  id              String          @id @default(cuid())
  organizationId  String
  name            String
  locations       String[]
  frequency       ReportFrequency
  emailRecipients String[]
  isActive        Boolean         @default(true)
  lastRunAt       DateTime?
  nextRunAt       DateTime
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model SearchKeyword {
  id         String   @id @default(cuid())
  keyword    String
  locationId String
  latitude   Float
  longitude  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  rankResults RankTrackingResult[]

  @@unique([keyword, locationId])
  @@index([keyword])
}

model RankTrackingResult {
  id            String       @id @default(cuid())
  keywordId     String
  rankPosition  Int?         // null means not found in top results
  searchDate    DateTime     @default(now())
  searchUrl     String?      // The URL that was searched
  businessUrl   String?      // The target business URL that was tracked
  businessName  String?      // The target business name that was tracked
  htmlSnapshot  String?      // Optional snapshot of the search results HTML
  createdAt     DateTime     @default(now())
  keyword       SearchKeyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@index([keywordId, searchDate])
}

enum PostType {
  WHATS_NEW
  EVENT
  OFFER
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  DELETED
}

enum RecurType {
  DAILY
  WEEKLY
  MONTHLY
}

enum ReviewStatus {
  PENDING
  REPLIED
  FLAGGED
}

enum SentimentType {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum ReplySource {
  MANUAL
  AI_GENERATED
  AUTO_POSTED
}

enum ReplyTone {
  FORMAL
  FRIENDLY
  APOLOGETIC
}

enum InsightType {
  VIEWS
  SEARCHES
  CLICKS
  DIRECTION_REQUESTS
  PHONE_CALLS
  PHOTOS_VIEWED
  PHOTO_QUANTITY
  WEBSITE_CLICKS
  CALL_CLICKS
  BUSINESS_IMPRESSIONS_MOBILE_MAPS
  BUSINESS_IMPRESSIONS_MOBILE_SEARCH
  BUSINESS_IMPRESSIONS_DESKTOP_MAPS
  BUSINESS_IMPRESSIONS_DESKTOP_SEARCH
  BUSINESS_BOOKINGS
  BUSINESS_FOOD_ORDERS
  BUSINESS_FOOD_MENU_CLICKS
  BUSINESS_CONVERSATIONS
}

enum ReportType {
  WEEKLY
  MONTHLY
  CUSTOM
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
}

enum ReportFrequency {
  WEEKLY
  MONTHLY
}

enum SubscriptionStatus {
  INACTIVE
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}
